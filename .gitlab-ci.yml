default:
  tags:
    - gaia-1

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

variables:
  GROUP: gaia6974605
  NPM_CACHE_DIR: "$CI_PROJECT_DIR/.npm/"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .npm/
    - .cache/pip/

stages:
  - check
  - build
  - container-scanning
  - deploy

.standard-rules: # Make hidden job to hold commmon rules
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /-wip/ || $CI_COMMIT_MESSAGE =~ /-skip-check/
      when: never
    - if: ($CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && $CI_COMMIT_MESSAGE !~ /-wip/ && $CI_COMMIT_MESSAGE !~ /-skip-check/
      when: always

.python-image:
  image: registry.gitlab.com/gaia6974605/images/python:v3.8.16
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .cache/pip/
    before_script:
      - python3 -m pip install -r requirements.txt
      - python3 -m pip install -r requirements-dev.txt

.node-image:
  image: registry.gitlab.com/gaia6974605/images/nodejs:18.18.2
  cache: # Cache modules in between jobs
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/
  before_script:
    - npm ci clean --legacy-peer-deps
    - npm ci --cache .npm --prefer-offline --legacy-peer-deps # front-end dependencies requires --legacy-peer-deps flag

.handle-ssh:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /-wip/ || $CI_COMMIT_MESSAGE =~ /-skip-check/
      when: never
    - if: ($CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && $CI_COMMIT_MESSAGE !~ /-wip/ && $CI_COMMIT_MESSAGE !~ /-skip-check/
      when: manual
  # https://gitlab.com/gitlab-examples/ssh-private-key/-/blob/master/.gitlab-ci.yml?ref_type=heads
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

checkov:
  stage: check
  allow_failure: true
  image:
    name: bridgecrew/checkov:3.2.5@sha256:1f4696fd69e4f188e8220bfa366e03f8c4a71078518d6c5fe7c4c56b28d65c88
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  extends:
    - .standard-rules
  script:
    - checkov -f Dockerfile -o cli -o junitxml --output-file-path console,checkov_results.xml
  artifacts:
    reports:
      junit:
        - "checkov_results.xml"
    expire_in: 1 week

eslint:
  stage: check
  allow_failure: true
  extends:
    - .standard-rules
    - .node-image
  script:
    - npm run prettier-check
    - npm run eslint-gitlab
    - npm run lint-eslint
  artifacts:
    reports:
      junit:
        - "$CI_PROJECT_DIR/eslint_result.xml"
    expire_in: 1 week

build-image:
  stage: build
  allow_failure: true
  extends:
    - .standard-rules
  script:
    - echo $CI_DEPLOY_PASSWORD | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin
    - docker pull $CI_REGISTRY/$GROUP/images/$CI_PROJECT_NAME:latest || true
    - docker build --cache-from $CI_REGISTRY/$GROUP/images/$CI_PROJECT_NAME:latest --tag $CI_REGISTRY/$GROUP/images/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - docker push $CI_REGISTRY/$GROUP/images/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA

container-scanning:
  stage: container-scanning
  allow_failure: true
  extends:
    - .standard-rules
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_DEPLOY_USER"
    TRIVY_PASSWORD: "$CI_DEPLOY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: $CI_REGISTRY/$GROUP/images/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --format template --template "@/contrib/junit.tpl"
      --output "$CI_PROJECT_DIR/trivy_report.xml" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Display critical vulnerabilities
    - time trivy image --exit-code 0 --severity HIGH,CRITICAL "$FULL_IMAGE_NAME"
    # Display docker cis
    - time trivy image --exit-code 0 --compliance docker-cis --report all "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      junit:
        - "trivy_report.xml"
    expire_in: 1 week

deploy:
  stage: deploy
  tags:
    - gaia-1
  extends:
    - .handle-ssh
  script:
    - >
      ssh $DEPLOY_USER@$DEPLOY_HOST
      "
        cd '$DEPLOY_PATH';
        echo $CI_DEPLOY_PASSWORD | docker login $CI_REGISTRY -u $CI_DEPLOY_USER --password-stdin;
        docker pull $CI_REGISTRY/$GROUP/images/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA;
      "
